/*--- La carpeta node_modules se reconstruye aunque se borre mediante 'npm install', porque toro lo necesario está en el package.json        npm install--- La carpeta dist se reconstruye con 'npm run build'.        npm run build---- npm ----- Node package manager.- Nos va a permitir a nosotros poder gestionar cualquier paqute de node que nosotros queramos. Nos va a ayudar a que las instalaciones  sean sumamente sencillas de hacer.- npm --version: Para ver la versión que tenemos.- Nos vamos con la terminal a la raiz del directorio del proyecto (desde aquí sale una carpeta llamada src con el index.html o js dentro) y ejecutamos npm.init    Ejemplo ruta:        funcody.com        funcody.com/package.json        funcody.com/src/index.js        funcody.com/src/index.html- npm init: Esto nos va a llevar a un asistente de creación del package.json    - package name: Nos dice que le pongamos un nombre. Nosotros le hemos puesto webpack-inicial --> ENTER    - version: Crea un versión por defecto siempre, que es la 1.0.0 --> ENTER    - description: Introducimos una descripción que explique de que va, o lo dejamos en blanco. Le hemos puesto cascaron base --> ENTER    - entry point: Cual es el punto inicial de nuestra aplicación. Aparece "index.js" lo podemos dejar así o darle nuestro punto de inicio.  --> ENTER    - test command: Si hay algún comando para realizar pruebas automáticas. Por el momento no le hemos añadido nada. --> ENTER    - git repository: Cual es el repositorio GIT. Le hemos dejado en blanco. Si lo tuvieramos colocariamos la url del git  --> ENTER    - keywords: Esto es para cuando subamos al repositorio de paquetes de Node en el caso que nosostros estuviéramos trabajando. Ayudaría mediante      palabras clave a que otros encontraran nuestro repositorio o proyecto. Lo hemos dejado en blanco --> ENTER    - author: Podemos poner nuestro nombre o dejarlo en blanco. --> ENTER    - license: Sale ISC, podemos dejar la que sale por defecto. --> ENTER    Una vez acabado escribimos yes y tener. Toro esto se puede cambiar manualmente en el archivo creado.- Si pide actualizar le podemos escribir el comando necesario y la versión. Ej: npm install -g npm@7.20.6---- package.json ----- Archivo primordial de todas las aplicaciones en node.- Este nos va a decir a node y a nosotros mismos, como funciona la aplicación, que dependencias son necesarias para pasarlas a  producción y que cosas tengo que descartar cuando lo quiero pasar a producción o las cosas que solo necesito en desarrollo (entre otras cosas).- Va a ser necesario para que yo pueda saber que paquetes son necesarios para que mi aplicación funcione, que paquetes no voy a ocupar en producción,  cuales son los comandos que necesito hacer para crear la aplicación o el paquete final.---- WEBPACK - INSTALACIÓN ----- El webpack es algo que no va a ir a producción, no va a ir al servidor, no se va a publicar.- Debe instalarse en la ubicación del package.json. Debemos hacer ls y ver el archivo package.json. Escribimos:    npm install webpack webpack-cli --save-dev- Significa:    npm: Node package manager    install: Instala. Se puede poner solo i y hace lo mismo    webpack: Instala webpack    webpack-cli: Instala webpack-cli, cli --> (command line interface).    --save-dev: Que lo ponga o guarde como una dependencia de desarrollo.- Nos vamos al package.json/scripts y añadimos separado por una coma: "build": "webpack"- Con esto le estamos indicando que cuando ejecute el comando build dispara webpack con su configuración por defecto en mi proyecto.  Por defecto va a buscar la carpeta src, va a ver los archivos de Javascript y los va a unificar, comprimir y los va a dejar listos para producción.    Ej:        "scripts": {            "test": "echo \"Error: no test specified\" && exit 1",            "build": "webpack"          },- Para ejecutar el build nos vamos a la ubicación del package.json y escribimos:    npm run build- Se crea una carpeta llamada dist. Dentro tiene el main.js. Este archivo es la aplicación de Javascript tal cual, unifica todos los archivos JS  en una única importación. Aquí está toro el código minificado y ofuscado.- Ahora nos tenemos que ir al index.html y hacer referencia al archivo javascript main.js --> <script src="../dist/main.js"></script>- Nosotros podemos decirle a JS que cosas quiero exportar y que cosas no (es como crear propiedades privadas). Con import y export:- Se puede importar trozos de código que estén en otros archivos que estén separados del archivo en ejecución.- import:    - Para importar se utiliza la palabra reservada import. Se hace así: import  { } from 'url'; En el archivo que se quiera importar.    - Dentro de los paréntesis se debe colocar la función que se quiera importar.        import  {saludar} from 'url';    Ej:    import {saludar} from './js/componentes';    const patronModulo = (()=>{        const nombre = 'gabatx';        saludar(nombre);    })();- export:    - Si queremos indicar a alguna función que queremos exportarla, debemos colocar la palabra export delante de ella.    - No puede tener el patrón módulo.    Ej:        export const saludar = (nombre) => {                console.log('Creando etiqueta h1');                const h1 = document.createElement('h1');                document.body.append(h1);                h1.innerText = `Hola me llamo ${nombre}`;            }- Creamos un archivo js llamado webpack.config en la ubicación del package.json. (para ver la configuración de este archivo  verlo en el archivo webpack.config.js)- Cuando no se configura este archivo el webpack entra por defecto en el modo de producción que elimina comentarios, deja el código limpio, simplificado...---- dist (carpeta de distribución)----- Contiene el main.js y es la combinación de todos mis archivos js.- El dist es lo que normalmente yo debería subir a mi servidor.- Una vez que acabemos el proyecto, lo ponemos en modo producción y nos  lo encapsulará. El dist comprimido y preparado para todos los navegadores es  el que debermos subir al hosting.*/