// Importamos la clase tudu de classesimport {Todo, TodoList,} from '../classes';// importamos la instancia todoList de index.js que fue donde se creóimport {todoList} from '../index'// ------------------------------------// ---------- REFERENCIAS HTML --------// ------------------------------------// Seleccionamos el tag donde irá la inyección de código htmlconst divTodoList = document.querySelector('.todo-list');const txtInput = document.querySelector('.new-todo');const borrarCompletados = document.querySelector('.clear-completed');const filtros = document.querySelectorAll('.filtro');const marcadorPendientes = document.querySelector('.todo-count');const filtrosUl = document.querySelector('.filters'); // Filtrar mediante el profesor:// Este no me funcionaba, lo he hecho con divTodoList.//const marcarCompletado = document.querySelector('.toggle');// ------------------------------------// ------------- FUNCIONES ------------// ------------------------------------// *********************************************************// Creamos una función que cree toro el contenido htmlexport const crearTodoHtml = (todo) => {    // Creamos una variable que contendrá un string con el código html.    // Lo introduciremos mediante backticks, que nos permite introducir código html multilinea y además interpolación    // de string para introducir datos de javascript.    // En label colocaremos el tudu.tarea para insertar el nombre. En completed, si estará completado o no. Esto se hará    // con operadores ternarios, que nos permiten hacer una condición sin un if.    // Si devuelve true, entonces añadimos completed, si no no añadimos nada.    // De igual manera imprimiremos check si está completado, si no no.    // Hemos colocado en el id, el tudu._id para que sea único y poderlo eliminar buscádolo por id.    const htmlTodo = `<li class="${(todo._completado) ? 'completed' : ''}" data-id="${todo._id}">                            <div class="view">                                <input class="toggle" type="checkbox" ${(todo._completado) ? 'checked' : ''}>                                <label>${todo._tarea}</label>                                <button class="destroy"></button>                            </div>                            <input class="edit" value="Create a TodoMVC template">                       </li>`;    // Creamos un variable que cree una etiqueta div. Es necesario este div para que contenga toda la lista ordenada, ya que    // esta lista tiene al contener un data-id y demás, es recomendable colocarlo toro dentro de un div. Después la eliminaremos.    const div = document.createElement('div');    // Introducimos dentro la etiqueta creada toro el string.    div.innerHTML = htmlTodo;    // Introducimos toro el contenido en el html. Pero solo vamos a introducir el primer hijo con firstElementChild, que es el li.    divTodoList.append(div.firstElementChild);    // Es necesario colocar el return para que devuelva toro el contenido.    return div.firstElementChild;}// -----  FUNCIÓN PARA CREAR INSTANCIAS MEDIANTE EL ARGUMENTO RECIBIDO (viene al pulsar Enter)  -----export const insertarTodo = (texto) => {    const tarea = new Todo(`${texto}`);    return tarea;}// -----   ELIMINAR TODOS LOS TUDUS SOLO DEL HTML: -----export const eliminarTodosTudus = () => {    // Se ha realizado al contrario porque de cero hacia adelante al ir eliminando los elementos, se cambian los indices y se    // descoloca el resultado, es inexacto.    for (let i = divTodoList.children.length - 1; i >= 0; i--) {        divTodoList.removeChild(divTodoList.children[i]);    }}// -----   INSERTAR CLASE EN EL TAG SELECCIONADO. BORRAR EN LOS DEMÁS -----const agregaClaseSeleccion = (tag) => {    // Eliminamos la clase selected de todos los tag    // Método 1    // for (let i = 0; i < filtros.length; i++){    //     filtros[i].classList.remove('selected');    // }    // Método 2    filtros.forEach(elem => elem.classList.remove('selected'));    // Recuperamos el tag donde se pulsa    const nombreTag = tag.target;    // Añadimos la clase selected al tag    nombreTag.classList.add('selected');};// -----   MOSTRAR NUMERO DE TUDUS PENDIENTES -----export const insertarNumeroTodosPendientes = () => {    const codigoHtml = `<strong>${todoList.mostrarNumeroTodosPendientes()}</strong> pendiente(s)`;    marcadorPendientes.innerHTML = codigoHtml;}// ------------------------------//----------- EVENTOS -----------// ------------------------------// ---------  CREAR UN TUDU AL PULSAR ENTER  ---------// La palabra event nos va a decir que tecla fue la que pulsó el usuario.txtInput.addEventListener("keyup", (event) => {    //console.log(event);    // Si pulsa intro y no es un carácter vacío.    if (event.keyCode === 13 && txtInput.value.length > 0) {        // Creamos la instancia tudu        const tarea = insertarTodo(txtInput.value);        // La introducimos en la base de datos        todoList.nuevoTodo(tarea);        // Creamos el código html con los valores de la instancia        crearTodoHtml(tarea);        // Borramos/reseteamos el contenido introducido del input        txtInput.value = '';        console.log(todoList);    }    // Mostramos el número de todos pendientes    insertarNumeroTodosPendientes();});// --------- MARCAR UN TUDU COMPLETADO  ---------divTodoList.addEventListener('click', (event) => {    //console.log('click');    //console.log(event.target.localName);    const nombreElemento = event.target.localName; // input, label, button... puede ser cualquier cosa donde hagamos click. Servirá para obligar que pinchen en el check    // Busca el elemento padre que esté por encima de donde se hace click. Buscamos el li, por eso lo hemos puesto dos veces seguidas (hasta encontrarlo).    const todoElemento = event.target.parentElement.parentElement;    //console.log(todoElemento); // Nos indica en consola el código html, donde se muestra el id del elemento    // Extraer el id del elemento. Se hace con getAttribute (''), donde podemos extraer el atributo que nos interese del código html.    // Puede ser la clase, el id, el data-id, el value...    const todoId = parseInt(todoElemento.getAttribute('data-id'));    // Enviamos el id para marcarlo como completado:    if (nombreElemento.includes('input')) { // Quiere decir que hizo click en el check. Si lo hacen en el input o en el botón no funciona        todoList.marcarCompletado(todoId);        // Para hacer referencia a todas las clases se utiliza el classList. Si queremos altener entre añadir y quitar una sola clase se hace con classList.toggle('')        todoElemento.classList.toggle('completed');        console.log(todoList);        // Si al pulsar sobre el input estamos en pendientes para ponerlo en completado, este desaparece.        if (filtros[1].classList.contains('selected')){            todoList.mostrarTodosPendientes();        }        // Si al pulsar sobre el input estamos en completados para ponerlo en pendientes, este desaparece.        if (filtros[2].classList.contains('selected')){            todoList.mostrarTodosCompletados();        }    }// --------- ELIMINAR UN TUDU  ---------    else if (nombreElemento.includes('button')) { // Hay que borrar el tudu        // Eliminamos el html        // Cogemos la etiqueta padre, donde dentro borraremos lo que queramos.        // Le decimos con removeChild() que hijo queremos borrar. Le añadimos todoElemento que hace referencia al <li></li> que estamos pulsando.        divTodoList.removeChild(todoElemento);        // Eliminamos del array        todoList.eliminarTodo(todoId);    }    // Mostramos el número de todos pendientes    insertarNumeroTodosPendientes();});//----------- BORRAR TUDUS COMPLETADOS -----------// Se podria recibir el evento pero no va a servir de nada, ya que cuando click en el botón no importa que coordenada va  hacer clickborrarCompletados.addEventListener('click', () => {    if (divTodoList.children.length > 0) {        todoList.eliminarCompletados();    }    // El profe:    // Dice de hacer el bucle a la inversa para que al borrar tudus con la dirección normal, se podría liar la cosa    // ya que al borrar por ejemplo el valor 2 y seguidamente el 3, el tres podría pasar a ser el 2 y borrar accidentalmente el 4.    // i es igual al valor máximo de hijos del padre    // Como es un array i recorerá toro el array desde la última posición hasta 0.    // i llegará hasta -1 y se saldrá.    for (let i = divTodoList.children.length - 1; i >= 0; i--) {        const elementoLi = divTodoList.children[i];        if (elementoLi.classList.contains('completed')) {            divTodoList.removeChild(elementoLi);        }    }    // El mío:    /*    const todos = document.querySelectorAll('li');    for (const todo of todos){        if (todo.getAttribute('class') === 'completed'){            divTodoList.removeChild(todo);        }    }    */});//----------- MOSTRAR TODOS LOS TUDUS -----------filtros[0].addEventListener('click', (event) => {    todoList.mostrarTodosTodos();    agregaClaseSeleccion(event);});//----------- MOSTRAR PENDIENTES -----------filtros[1].addEventListener('click', (event) => {    todoList.mostrarTodosPendientes();    agregaClaseSeleccion(event);});//----------- MOSTRAR COMPLETADOS -----------filtros[2].addEventListener('click', (event) => {    todoList.mostrarTodosCompletados();    agregaClaseSeleccion(event);});/*//----------- FILTRAR TUDUS PROFESOR -----------// Se hace añadiendo la clase hidden a los elementos una vez se pulse sobre el botón.filtrosUl.addEventListener('click', (event) => {    const textoFiltro = event.target.text;    // Si filtro devuelve undefined (Lo hace si pinchas fuera de la palabra)    if (!textoFiltro){        return;    }    for (const elemento of divTodoList.children){        // Borra de todos los elementos la clase hidden.        elemento.classList.remove('hidden');        // Guardamos en una variable la clase del elemento analizado.        const completado = elemento.classList.contains('completed');        switch (textoFiltro) {            // Cuando pulsemos 'pendientes', todos los tag que contengan la clase completed, se le pondrá hidden,            case ('Pendientes'):                if (completado){                    elemento.classList.add('hidden');                }                break;            // Cuando pulsemos 'completados', todos los tag que NO contengan la clase completed, se le pondrá hidden,            case ('Completados'):                if (!completado){                    elemento.classList.add('hidden');                }                break;        }    }});*/